function [Percent_Error_Test , R, net] = myNeuralNetworkFunction_MAPE(input_train,target_train,input_Test, target_Test, Best_TargetValue_MAPE )

% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 10-Sep-2020 22:00:51
%
% This script assumes these variables are defined:
%
%   input - input data.
%   target - target data.
clear net
x = input_train';
t = target_train';
input_Test = input_Test';
%target_Test= target_Test';
% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.

% Create a Fitting Network
hiddenLayerSize = 10;
net = fitnet(hiddenLayerSize,trainFcn);
net.trainParam.showWindow=0;


% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
output_test = net(x);
e = gsubtract(t,output_test);
performance = perform(net,t,output_test);

output_test_Final = net(input_Test);
output_test_Final=output_test_Final';
Error_Targets(:,1)=  (abs(target_Test(:,1)- output_test_Final(:,1)) ./ target_Test(:,1) ) ;%* 100 ;
Percent_Error_Test = Error_Targets(:,1);
Percent_Error_Test_Mean = mean(Error_Targets(:,1));
R_Matrix = corrcoef(target_Test(:,1) , output_test_Final(:,1));
R= R_Matrix(1,2);




%To Save neural network to 'BestNet'
if mean( Percent_Error_Test) <= Best_TargetValue_MAPE     
    BestNet=net;
    %%%%%%%%save BestNet;
end


% View the Network
%view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotfit(net,x,t)


